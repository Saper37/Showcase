Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> for t in range( 1 ):
	from eulotfunc import *
	rows, exs = distzize( erjp )
	rows.reverse( )
	exs.reverse( )
	vali = 22
	oik = [ 2, 20, 30, 31, 40 ]
	exoik = [ 8, 12 ]
	Q = nQload( )

	f = fperms( rows[  :: ] )

	q0 = loadq0( len( Q ) )

	max_value = pickmax( f, 2 )
	for x in range( len( q0 ) ):
		qrow = Q[ int( q0[ x ], 2 ) ]
		riv = numpairs( qrow, f, 2 )
		riv1 = rivscore( riv, max_value )
		q0[ x ] = [ q0[ x ], sum( riv1 ) / len( riv1 ), riv ]
	q0.sort( key=lambda x:x [ 1 ] )
	index = 0
	raja = 0.55, .7
	t0 = datetime.today( )
	print( t0, len( q0 ) )
	while index < len( q0 ):
		if raja[ 0 ] <= q0[ index ][ 1 ] <= raja[ 1 ]:
			index += 1

		else:
			del q0[ index ]
	t1 = datetime.today( )
	print( t1, t1 - t0, len( q0 ) )

	qdict = {}
	for row in q0:
		ok = qdict.get(  row[ 1 ] )
		if ok == None:
			qdict[ row[ 1 ] ] = [ ]
			qdict[ row[ 1 ] ].append( row[ 0 ] )
		else:
			qdict[ row[ 1 ] ].append( row[ 0 ] )
	for t in range( 1 ):
		qvalues = list( qdict.values( ) )
		for x in range( len( qvalues ) ):
			for x1 in range( len( qvalues[ x ] ) ):
				qvalues[ x ][ x1 ] = Q[ int( qvalues[ x ][ x1 ], 2 ) ]

		for x in range( len( qvalues ) ):
			qf = fperms( qvalues[ x ] )
			qkeys = list( qf.keys( ) )
			qfvalues = list( qf.values( ) )
			for y in range( len( qfvalues ) ):
				qfvalues[ y ] = len( qfvalues[ y ] )
			qv0 = list( zip( qkeys, qfvalues ) )
			qv0.sort( key=lambda x:x[ 1 ] )
			qvalues[ x ] = picksizes( qv0 )

			
2024-03-17 16:30:01.882468 2118760
2024-03-17 16:34:26.050352 0:04:24.167884 1840699
>>> length( qvalues )
[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
>>> length( qvalues[ 0 ] )
[0, 50, 1225, 17193, 69832, 28992]
>>> qvalues[ 0 ][ 1 ]
[('50', 1040), ('48', 1041), ('27', 1174), ('25', 1226), ('28', 1394), ('42', 1680), ('2', 1782), ('5', 1864), ('26', 1894), ('36', 1925), ('29', 1927), ('3', 1961), ('4', 1961), ('33', 1996), ('31', 1997), ('37', 2048), ('10', 2193), ('22', 2254), ('47', 2270), ('24', 2271), ('45', 2547), ('43', 2590), ('44', 2614), ('14', 2682), ('12', 2739), ('1', 2831), ('30', 2848), ('8', 2885), ('23', 2924), ('32', 2927), ('40', 2953), ('46', 3093), ('13', 3175), ('38', 3410), ('9', 3580), ('17', 3621), ('19', 3635), ('7', 3672), ('15', 3708), ('21', 3730), ('35', 3944), ('41', 4073), ('39', 4204), ('16', 4311), ('11', 4508), ('18', 4551), ('6', 4714), ('34', 5287), ('49', 5430), ('20', 5876)]
>>> cn = contn( numming( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], True, [ 0 ] ), 5 )
>>> cn
[[25, 6, 11, 12, 7], [46, 37, 27, 34, 16], [44, 24, 32, 23, 38], [43, 35, 45, 36, 49], [39, 17, 28, 19, 3], [8, 2, 4, 10, 26], [14, 29, 13, 47, 40], [9, 15, 33, 42, 30], [41, 5, 21, 22, 20], [31, 18, 1, 48]]
>>> fiquout( oik, cn )
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]
>>> [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ]
[50, 48, 27, 25, 28, 42, 2, 5, 26, 36, 29, 3, 4, 33, 31, 37, 10, 22, 47, 24, 45, 43, 44, 14, 12, 1, 30, 8, 23, 32, 40, 46, 13, 38, 9, 17, 19, 7, 15, 21, 35, 41, 39, 16, 11, 18, 6, 34, 49, 20]
>>> def addtorow( row ):
	rs = [ ]
	for num in row:
		while len( rs ) < num + 1:
			rs.append( 0 )
		rs[ num ] += 1
	return rs

>>> addtorow( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ] )
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
>>> n = numming( addtorow( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ] ), True, [ 0 ] )
>>> cn = contn( int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], 5 )
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> cn = contn( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], 5 )
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    cn = contn( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], 5 )
  File "C:\Users\Samppa\AppData\Local\Programs\Python\Python38\myfunctions.py", line 140, in contn
    n1.append( sn.copy( ) )
AttributeError: 'int' object has no attribute 'copy'
>>> def colnums( nums, limit ):
	col, riv = [ ], [ ]
	for num in nums:
		riv.append( num )
		if len( riv ) == limit:
			col.append( riv )
			riv = [ ]
	if len( riv ) > 0:
		col.append( riv )
	return col

>>> colnums( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], 5 )
[[50, 48, 27, 25, 28], [42, 2, 5, 26, 36], [29, 3, 4, 33, 31], [37, 10, 22, 47, 24], [45, 43, 44, 14, 12], [1, 30, 8, 23, 32], [40, 46, 13, 38, 9], [17, 19, 7, 15, 21], [35, 41, 39, 16, 11], [18, 6, 34, 49, 20]]
>>> n = colnums( [ int( pair[ 0 ] ) for pair in qvalues[ 0 ][ 1 ] ], 5 )
>>> fiquout( oik, n )
[0, 1, 1, 0, 0, 1, 1, 0, 0, 1]
>>> len( qvalues )
25
>>> length( qvalues )
[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
>>> for t in range( 1 ):
	fs = [ ]
	for qrow in qvalues:
		n = colnums( [ int( pair[ 0 ] ) for pair in qrow[ 1 ] ], 5 )
		fs.append( n )

		
>>> f
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    f
KeyboardInterrupt
>>> fs
[[[50, 48, 27, 25, 28], [42, 2, 5, 26, 36], [29, 3, 4, 33, 31], [37, 10, 22, 47, 24], [45, 43, 44, 14, 12], [1, 30, 8, 23, 32], [40, 46, 13, 38, 9], [17, 19, 7, 15, 21], [35, 41, 39, 16, 11], [18, 6, 34, 49, 20]], [[50, 27, 48, 25, 28], [42, 2, 26, 29, 5], [3, 31, 4, 36, 33], [37, 10, 22, 24, 47], [45, 44, 14, 1, 43], [12, 32, 30, 23, 40], [46, 8, 13, 38, 19], [17, 9, 15, 21, 7], [35, 39, 41, 16, 18], [6, 11, 34, 49, 20]], [[27, 48, 50, 25, 28], [42, 2, 3, 29, 26], [36, 5, 33, 4, 37], [31, 10, 24, 22, 47], [44, 45, 14, 1, 23], [32, 12, 30, 43, 40], [13, 8, 46, 19, 38], [15, 17, 9, 21, 7], [35, 41, 6, 39, 11], [16, 18, 34, 49, 20]], [[27, 48, 50, 25, 28], [42, 2, 26, 3, 36], [29, 5, 33, 4, 31], [37, 10, 24, 22, 14], [47, 45, 44, 32, 1], [30, 12, 23, 43, 40], [46, 8, 13, 19, 15], [38, 21, 9, 17, 7], [35, 6, 39, 11, 41], [18, 16, 34, 49, 20]], [[27, 48, 50, 25, 28], [42, 2, 29, 3, 26], [36, 5, 33, 24, 4], [37, 10, 31, 22, 45], [32, 14, 23, 44, 47], [1, 30, 12, 43, 40], [13, 19, 46, 8, 15], [9, 21, 38, 17, 6], [7, 35, 18, 39, 11], [41, 16, 34, 49, 20]], [[27, 48, 50, 25, 28], [42, 2, 29, 36, 3], [26, 5, 33, 4, 24], [37, 31, 10, 45, 22], [1, 44, 14, 23, 32], [47, 30, 12, 40, 19], [43, 13, 46, 8, 6], [15, 21, 9, 38, 17], [18, 7, 39, 11, 35], [41, 16, 34, 49, 20]], [[27, 48, 50, 25, 28], [42, 2, 29, 26, 36], [3, 33, 5, 4, 37], [24, 10, 45, 22, 14], [31, 32, 1, 44, 23], [30, 12, 40, 47, 19], [43, 13, 6, 15, 46], [21, 8, 38, 9, 17], [11, 18, 39, 41, 7], [35, 16, 34, 49, 20]], [[27, 48, 50, 25, 42], [28, 29, 2, 36, 3], [26, 24, 5, 4, 33], [37, 45, 10, 23, 32], [44, 22, 1, 14, 31], [30, 19, 6, 12, 40], [47, 15, 46, 21, 13], [18, 8, 43, 11, 9], [38, 39, 17, 35, 41], [7, 34, 16, 49, 20]], [[27, 48, 50, 25, 42], [28, 36, 2, 29, 26], [3, 33, 5, 24, 45], [4, 37, 23, 32, 44], [10, 22, 14, 1, 6], [31, 30, 40, 12, 19], [21, 15, 18, 13, 46], [47, 38, 43, 9, 17], [39, 11, 41, 34, 8], [35, 7, 20, 49, 16]], [[27, 48, 50, 25, 42], [28, 2, 36, 29, 3], [33, 26, 45, 5, 23], [4, 24, 37, 6, 32], [1, 44, 10, 14, 19], [18, 22, 30, 40, 15], [12, 21, 31, 11, 46], [17, 41, 39, 34, 9], [20, 13, 35, 38, 47], [43, 8, 49, 7, 16]], [[27, 48, 50, 25, 42], [36, 2, 28, 29, 3], [6, 26, 33, 45, 23], [4, 24, 5, 32, 18], [19, 10, 44, 37, 1], [14, 34, 21, 30, 15], [20, 40, 22, 11, 41], [12, 39, 46, 17, 31], [43, 49, 9, 13, 35], [38, 8, 7, 16, 47]], [[27, 48, 50, 25, 36], [42, 2, 6, 28, 29], [3, 18, 33, 26, 45], [23, 20, 32, 19, 34], [4, 11, 24, 1, 44], [21, 40, 5, 37, 15], [39, 41, 10, 14, 22], [12, 30, 17, 49, 35], [46, 9, 31, 38, 13], [7, 16, 43, 8, 47]], [[27, 48, 6, 36, 20], [50, 42, 18, 2, 25], [34, 3, 33, 45, 23], [11, 28, 15, 39, 32], [29, 49, 26, 44, 21], [40, 19, 24, 4, 41], [1, 17, 14, 37, 35], [5, 30, 12, 13, 46], [16, 7, 22, 9, 38], [10, 8, 43, 31, 47]], [[27, 6, 20, 48, 18], [34, 36, 49, 11, 23], [42, 41, 15, 39, 33], [2, 21, 45, 32, 25], [19, 40, 35, 3, 50], [44, 26, 17, 16, 1], [14, 9, 29, 28, 4], [24, 37, 5, 30, 38], [46, 12, 7, 8, 10], [13, 22, 43, 31, 47]], [[27, 20, 6, 34, 49], [18, 11, 48, 39, 36], [41, 21, 15, 35, 19], [32, 23, 16, 17, 40], [2, 45, 42, 9, 25], [14, 12, 33, 1, 7], [3, 38, 46, 50, 44], [29, 13, 8, 26, 24], [22, 37, 30, 28, 43], [4, 5, 10, 31, 47]], [[20, 49, 6, 34, 18], [27, 11, 41, 39, 35], [21, 16, 15, 19, 17], [36, 48, 40, 32, 23], [9, 7, 38, 45, 8], [46, 14, 44, 1, 12], [13, 2, 3, 33, 43], [24, 4, 42, 37, 30], [22, 25, 29, 26, 10], [28, 47, 5, 50, 31]], [[20, 49, 34, 6, 11], [18, 39, 41, 16, 35], [21, 27, 15, 17, 7], [9, 38, 19, 40, 8], [23, 32, 13, 12, 46], [36, 45, 43, 30, 1], [14, 33, 44, 3, 48], [24, 4, 2, 47, 37], [42, 22, 5, 10, 28], [29, 26, 31, 25, 50]], [[20, 49, 34, 6, 18], [11, 39, 16, 41, 35], [9, 21, 15, 17, 7], [19, 8, 38, 40, 13], [32, 12, 46, 43, 23], [44, 45, 14, 36, 27], [1, 24, 47, 30, 33], [22, 31, 3, 2, 4], [10, 37, 48, 5, 42], [25, 29, 26, 28, 50]], [[20, 49, 34, 11, 6], [16, 39, 18, 41, 35], [9, 21, 7, 17, 15], [19, 38, 8, 13, 46], [40, 43, 23, 14, 12], [32, 47, 30, 1, 44], [45, 24, 31, 36, 22], [33, 37, 3, 27, 4], [10, 5, 2, 29, 26], [42, 25, 48, 28, 50]], [[20, 49, 34, 16, 11], [39, 6, 18, 35, 41], [9, 7, 17, 21, 15], [38, 8, 19, 13, 40], [46, 43, 47, 12, 32], [23, 14, 44, 1, 30], [45, 31, 24, 22, 10], [37, 36, 4, 33, 3], [5, 2, 26, 29, 27], [28, 25, 42, 48, 50]], [[20, 49, 34, 16, 11], [39, 18, 6, 35, 41], [7, 9, 17, 38, 21], [15, 8, 13, 40, 19], [43, 46, 12, 47, 23], [32, 14, 30, 44, 31], [45, 24, 1, 22, 10], [37, 4, 5, 33, 36], [3, 29, 2, 26, 42], [28, 25, 27, 50, 48]], [[20, 49, 34, 16, 11], [39, 35, 18, 6, 41], [9, 7, 17, 15, 21], [38, 13, 8, 19, 46], [43, 40, 47, 12, 30], [31, 14, 1, 32, 23], [44, 22, 45, 24, 10], [37, 5, 4, 33, 36], [3, 29, 26, 2, 28], [42, 25, 50, 48, 27]], [[49, 20, 34, 16, 11], [39, 41, 7, 18, 35], [9, 17, 6, 21, 38], [13, 8, 15, 46, 43], [47, 19, 40, 12, 30], [31, 14, 23, 44, 32], [1, 22, 10, 45, 24], [37, 5, 4, 33, 29], [3, 26, 36, 2, 28], [25, 42, 50, 48, 27]], [[49, 20, 34, 16, 11], [7, 39, 35, 41, 9], [18, 38, 17, 6, 13], [21, 8, 15, 46, 43], [19, 47, 40, 12, 30], [31, 14, 1, 23, 22], [44, 10, 32, 24, 37], [45, 5, 4, 33, 29], [26, 3, 2, 36, 28], [25, 42, 50, 48, 27]], [[49, 20, 34, 16, 11], [7, 35, 9, 39, 41], [38, 13, 18, 21, 17], [6, 46, 15, 8, 43], [47, 19, 30, 12, 31], [40, 14, 1, 44, 10], [32, 23, 22, 37, 24], [45, 5, 4, 26, 29], [33, 3, 2, 36, 28], [42, 25, 50, 48, 27]]]
>>> for t in range( 1 ):
	fs = [ ]
	for qrow in qvalues:
		n = colnums( [ int( pair[ 0 ] ) for pair in qrow[ 1 ] ], 5 )
		fs.append( fiquout( oik, n ) )

		
>>> fs
[[0, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 2, 0, 0, 0, 1], [0, 1, 0, 1, 0, 2, 0, 0, 0, 1], [0, 1, 1, 0, 0, 2, 0, 0, 0, 1], [0, 1, 0, 1, 0, 2, 0, 0, 0, 1], [0, 1, 0, 1, 0, 2, 0, 0, 0, 1], [0, 1, 0, 0, 1, 2, 0, 0, 0, 1], [0, 1, 0, 0, 1, 2, 0, 0, 0, 1], [0, 1, 0, 0, 0, 3, 0, 0, 0, 1], [0, 1, 0, 0, 0, 2, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 2, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 2, 0, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 2, 0, 0, 1, 0], [1, 0, 0, 0, 2, 1, 0, 0, 1, 0], [1, 0, 0, 0, 2, 1, 0, 0, 1, 0], [1, 0, 0, 0, 2, 1, 0, 0, 1, 0], [1, 0, 0, 0, 2, 1, 0, 0, 1, 0]]
>>> len( f )
11660
>>> f[ '1' ]
[3, 32, 52, 58, 80, 81, 82, 95, 104, 106, 109, 112, 116, 135, 167, 168, 178, 202, 204, 246, 252, 269, 270, 277, 279, 302, 307, 313, 315, 343, 353, 359, 363, 398, 402, 424, 429, 432, 441, 448, 450, 466, 478, 481, 483, 486, 488, 511, 512, 525, 532, 546, 547, 552, 557, 564, 568, 571, 576, 581, 596, 607, 612, 616, 630, 634, 636, 643, 659, 670, 689, 690]
>>> 
============================================================================== RESTART: Shell =============================================================================
>>> for t in range( 1 ):
	from eulotfunc import *
	rows, exs = distzize( erjp )
	rows.reverse( )
	exs.reverse( )
	vali = 22
	oik = [ 2, 20, 30, 31, 40 ]
	exoik = [ 8, 12 ]
	Q = nQload( )

	f = fperms( rows[  :: ] )

	q0 = loadq0( len( Q ) )

	max_value = pickmax( f, 2 )
	for x in range( len( q0 ) ):
		qrow = Q[ int( q0[ x ], 2 ) ]
		riv = numpairs( qrow, f, 2 )
		riv1 = rivscore( riv, max_value )
		q0[ x ] = [ q0[ x ], sum( riv1 ) / len( riv1 ), riv ]
	q0.sort( key=lambda x:x [ 1 ] )
	index = 0
	raja = 0.55, .7
	t0 = datetime.today( )
	print( t0, len( q0 ) )
	while index < len( q0 ):
		if raja[ 0 ] <= q0[ index ][ 1 ] <= raja[ 1 ]:
			index += 1

		else:
			del q0[ index ]
	t1 = datetime.today( )
	print( t1, t1 - t0, len( q0 ) )

	
2024-03-17 18:44:32.775348 2118760
2024-03-17 18:48:11.394086 0:03:38.618738 1840699
>>> f[ '1' ]
[3, 32, 52, 58, 80, 81, 82, 95, 104, 106, 109, 112, 116, 135, 167, 168, 178, 202, 204, 246, 252, 269, 270, 277, 279, 302, 307, 313, 315, 343, 353, 359, 363, 398, 402, 424, 429, 432, 441, 448, 450, 466, 478, 481, 483, 486, 488, 511, 512, 525, 532, 546, 547, 552, 557, 564, 568, 571, 576, 581, 596, 607, 612, 616, 630, 634, 636, 643, 659, 670, 689, 690]
>>> stdev( f[ '1' ] )
199.67048559289228
>>> stdev( f[ '2' ] )
196.91781890891986
>>> variance( f[ '1' ] )
39868.30281690141
>>> def absluter( row ):
	col = [ ]
	for x in range( len( row ) - 1 ):
		col.append( abs( row[ x ] - row[ x + 1 ] ) )
	return col

>>> absoluter = lambda row: [ abs( row[ x ] - row[ x + 1 ] ) for x in range( len( row ) - 1 ) ]
>>> absoluter( f[ '1' ] )
[29, 20, 6, 22, 1, 1, 13, 9, 2, 3, 3, 4, 19, 32, 1, 10, 24, 2, 42, 6, 17, 1, 7, 2, 23, 5, 6, 2, 28, 10, 6, 4, 35, 4, 22, 5, 3, 9, 7, 2, 16, 12, 3, 2, 3, 2, 23, 1, 13, 7, 14, 1, 5, 5, 7, 4, 3, 5, 5, 15, 11, 5, 4, 14, 4, 2, 7, 16, 11, 19, 1]
>>> mean( absoluter( f[ '1' ] ) )
9.67605633802817
>>> mean( absoluter( f[ '2' ] ) )
10.46875
>>> mean( absoluter( f[ '3' ] ) )
10.76923076923077
>>> for x in range( 1, 51 ):
	print( mean( absoluter( f[ '{}'.format( x ) ] ) ), end= ' ' )

	
9.67605633802817 10.46875 10.76923076923077 10.582089552238806 10.253731343283581 8.7375 9.337662337662337 9.602739726027398 9.03896103896104 10.405797101449275 8.975 9.916666666666666 9.586666666666666 9.591549295774648 9.421052631578947 8.9125 9.355263157894736 9.012658227848101 9.613333333333333 8.011494252873563 9.421052631578947 10.246376811594203 9.80281690140845 9.779411764705882 10.754098360655737 10.954545454545455 13 10.952380952380953 10.393939393939394 10 10.057971014492754 10 10.575757575757576 8.595238095238095 9.076923076923077 11.015625 10.617647058823529 9.486842105263158 8.974683544303797 9.73611111111111 9.23076923076923 10.921875 9.75 10.128571428571428 10.36231884057971 9.662162162162161 9.929577464788732 12.263157894736842 8.255813953488373 10.95 
>>> for x in oik:
	print( mean( absoluter( f[ '{}'.format( x ) ] ) ), end= ' ' )

	
10.46875 8.011494252873563 10 10.057971014492754 9.73611111111111 
>>> for t in range( 1 ):
	riv = [ ]
	for x in oik:
		riv.append( mean( absoluter( f[ '{}'.format( x ) ] ) ) )

		
>>> sum( riv )
48.274326378477426
>>> 48.274326378477426 / len( riv )
9.654865275695485
>>> oik
[2, 20, 30, 31, 40]
>>> q0[ 0 ]
['1101100001', 0.55, [[81, 109, 167, 178, 270, 359, 512, 525], [3, 80, 252, 448], [32, 80, 246, 277, 279, 307, 571], [80, 109, 167, 178, 315, 488, 552], [72, 260, 322, 476], [158, 175, 210, 431, 435, 594, 642, 678], [109, 167, 178, 187, 197, 281, 310, 322, 327, 395, 421, 430, 472, 622], [80, 247, 257, 523], [14, 80, 122, 322, 419, 457, 463, 603], [44, 80, 100, 360, 365, 682, 683, 718]]]
>>> for t in range( 1 ):
	riv = [ ]
	for x in Q[ int( q0[ 0 ][ 0 ], 2 ) ]:
		riv.append( mean( absoluter( f[ '{}'.format( x ) ] ) ) )

		
>>> print( riv )
[9.67605633802817, 10.46875, 10.76923076923077, 10.393939393939394, 10.36231884057971]
>>> sum( riv )
51.67029534177804
>>> sum( riv ) / len( riv )
10.334059068355609
>>> 8 * 1.6
12.8
>>> 8.5 * 1.6
13.600000000000001
>>> for t in range( 1 ):
	riv = [ ]
	for x in Q[ int( q0[ 0 ][ 0 ], 2 ) ]:
		riv.append( median( absoluter( f[ '{}'.format( x ) ] ) ) )
	print( riv )
	sum( riv )
	sum( riv ) / len( riv )

	
[6, 8.0, 8, 7.0, 7]
36.0
7.2
>>> f[ '1 ']
Traceback (most recent call last):
  File "<pyshell#92>", line 1, in <module>
    f[ '1 ']
KeyError: '1 '
>>> f[ '1' ]
[3, 32, 52, 58, 80, 81, 82, 95, 104, 106, 109, 112, 116, 135, 167, 168, 178, 202, 204, 246, 252, 269, 270, 277, 279, 302, 307, 313, 315, 343, 353, 359, 363, 398, 402, 424, 429, 432, 441, 448, 450, 466, 478, 481, 483, 486, 488, 511, 512, 525, 532, 546, 547, 552, 557, 564, 568, 571, 576, 581, 596, 607, 612, 616, 630, 634, 636, 643, 659, 670, 689, 690]
>>> median( absoluter( f[ '1' ] ) )
6
>>> absoluter( f[ '1' ] )
[29, 20, 6, 22, 1, 1, 13, 9, 2, 3, 3, 4, 19, 32, 1, 10, 24, 2, 42, 6, 17, 1, 7, 2, 23, 5, 6, 2, 28, 10, 6, 4, 35, 4, 22, 5, 3, 9, 7, 2, 16, 12, 3, 2, 3, 2, 23, 1, 13, 7, 14, 1, 5, 5, 7, 4, 3, 5, 5, 15, 11, 5, 4, 14, 4, 2, 7, 16, 11, 19, 1]
>>> mode( absoluter( f[ '1' ] ) )
2
>>> absoluter( f[ '1' ] ).count( 2 )
8
>>> absoluter( f[ '2' ] )
[5, 1, 30, 2, 5, 5, 6, 7, 2, 28, 33, 9, 5, 2, 1, 8, 8, 3, 9, 8, 2, 13, 7, 7, 5, 16, 15, 10, 11, 12, 10, 7, 1, 11, 5, 11, 21, 8, 22, 3, 3, 26, 9, 1, 4, 17, 20, 4, 36, 5, 8, 6, 3, 41, 4, 15, 28, 1, 8, 11, 3, 17, 16, 10]
>>> absoluter( f[ '3' ] )
[11, 34, 12, 3, 7, 2, 8, 30, 12, 5, 17, 27, 9, 9, 5, 20, 33, 2, 3, 2, 3, 3, 27, 17, 18, 1, 3, 7, 7, 12, 17, 2, 12, 4, 16, 4, 12, 9, 11, 7, 2, 5, 4, 6, 2, 11, 46, 1, 17, 1, 25, 6, 1, 1, 13, 1, 13, 2, 1, 33, 9, 1, 28, 17, 11]
>>> mean( absoluter( f[ '3' ] ) )
10.76923076923077
>>> mean( absoluter( f[ '2' ] ) )
10.46875
>>> math.pi
Traceback (most recent call last):
  File "<pyshell#103>", line 1, in <module>
    math.pi
NameError: name 'math' is not defined
>>> import math
>>> math.pi
3.141592653589793
>>> def normal_dist( x, mean, sd ):
	return ( math.pi * sd ) * math.exp( -.5 * ( ( x - mean ) / sd )** 2 )

>>> normal_dist( 1, 0, 1 )
1.9054722647301798
>>> normal_dist( 5, mean( absoluter( f[ '3' ] ) ), stdev( absoluter( f[ '3' ] ) ) )
26.890488015637967
>>> a = absoluter( f[ '3' ] )
>>> mean( a )
10.76923076923077
>>> median( a )
8
>>> mode( a )
1
>>> a
[11, 34, 12, 3, 7, 2, 8, 30, 12, 5, 17, 27, 9, 9, 5, 20, 33, 2, 3, 2, 3, 3, 27, 17, 18, 1, 3, 7, 7, 12, 17, 2, 12, 4, 16, 4, 12, 9, 11, 7, 2, 5, 4, 6, 2, 11, 46, 1, 17, 1, 25, 6, 1, 1, 13, 1, 13, 2, 1, 33, 9, 1, 28, 17, 11]
>>> oik
[2, 20, 30, 31, 40]
>>> a = absoluter( f[ '2' ] )
>>> a
[5, 1, 30, 2, 5, 5, 6, 7, 2, 28, 33, 9, 5, 2, 1, 8, 8, 3, 9, 8, 2, 13, 7, 7, 5, 16, 15, 10, 11, 12, 10, 7, 1, 11, 5, 11, 21, 8, 22, 3, 3, 26, 9, 1, 4, 17, 20, 4, 36, 5, 8, 6, 3, 41, 4, 15, 28, 1, 8, 11, 3, 17, 16, 10]
>>> mean( a )
10.46875
>>> median( a )
8.0
>>> mode( a )
5
>>> mean( a ) - a[ 0 ]
5.46875
>>> for x in range( 1, 51 ):
	a = absoluter( f[ '{}'.format( x ) ] )
	m = mean( a )
	print( m - a[ 0 ], end=' ' )

	
-19.323943661971832 5.46875 -0.23076923076922995 -2.4179104477611943 -1.7462686567164187 1.7375000000000007 8.337662337662337 8.602739726027398 5.038961038961039 6.405797101449275 7.975 6.916666666666666 1.586666666666666 2.591549295774648 7.421052631578947 -3.0875000000000004 6.355263157894736 3.0126582278481013 4.613333333333333 7.011494252873563 -0.5789473684210531 7.246376811594203 -6.19718309859155 8.779411764705882 2.754098360655737 3.954545454545455 4 4.9523809523809526 -0.6060606060606055 9 4.057971014492754 8 -5.424242424242424 4.595238095238095 -17.923076923076923 1.015625 2.617647058823529 -9.513157894736842 5.974683544303797 4.736111111111111 7.23076923076923 -15.078125 -9.25 -27.871428571428574 1.3623188405797109 -19.33783783783784 6.929577464788732 8.263157894736842 -7.7441860465116275 7.949999999999999 
>>> for x in range( 1, 51 ):
	value = f[ '{}'.format( x ) ]
	a = absoluter( value )
	m = mean( a )
	print( m - value[ 0 ], end=' ' )

	
6.67605633802817 -7.53125 7.76923076923077 4.582089552238806 -26.746268656716417 -4.262499999999999 5.337662337662337 -13.397260273972602 -1.9610389610389607 8.405797101449275 5.975 0.9166666666666661 9.586666666666666 -20.408450704225352 8.421052631578947 1.9124999999999996 8.355263157894736 5.012658227848101 7.613333333333333 3.011494252873563 1.421052631578947 8.246376811594203 -0.19718309859154992 -34.220588235294116 -40.24590163934426 10.954545454545455 -6 -13.047619047619047 -21.606060606060606 10 -3.942028985507246 -1 -1.4242424242424239 8.595238095238095 -0.9230769230769234 -5.984375 8.617647058823529 8.486842105263158 0.9746835443037973 -8.26388888888889 9.23076923076923 -2.078125 -4.25 3.128571428571428 5.362318840579711 0.6621621621621614 -2.070422535211268 7.2631578947368425 7.2558139534883725 -28.05 
>>> for x in oik:
	value = f[ '{}'.format( x ) ]
	a = absoluter( value )
	m = mean( a )
	print( m - value[ 0 ], end=' ' )

	
-7.53125 3.011494252873563 10 -3.942028985507246 -8.26388888888889 
>>> a
[5, 13, 1, 5, 13, 6, 4, 3, 21, 49, 13, 2, 10, 2, 20, 63, 8, 6, 7, 11, 17, 7, 22, 16, 4, 24, 13, 9, 1, 8, 19, 1, 1, 1, 10, 1, 4, 4, 2, 17, 6, 4, 9, 15, 12, 2, 4, 3, 6, 23, 7, 4, 4, 4, 31, 2, 2, 16, 11, 3, 2, 1, 19, 10, 7, 8, 6, 1, 13, 5, 3, 15]
>>> stdev( a )
10.447714293533846
>>> len( [ num for num in a if stdev( a ) > num ] ) / len( a )
0.6666666666666666
>>> rsmaara( a )
Traceback (most recent call last):
  File "<pyshell#135>", line 1, in <module>
    rsmaara( a )
TypeError: rsmaara() missing 1 required positional argument: 'maara'
>>> rsmaara( a, len( a ) )
Traceback (most recent call last):
  File "<pyshell#136>", line 1, in <module>
    rsmaara( a, len( a ) )
  File "C:\Users\Samppa\AppData\Local\Programs\Python\Python38\myfunctions.py", line 129, in rsmaara
    for num in row:
TypeError: 'int' object is not iterable
>>> rsmaara( a, len( a ) + 1 )
Traceback (most recent call last):
  File "<pyshell#137>", line 1, in <module>
    rsmaara( a, len( a ) + 1 )
  File "C:\Users\Samppa\AppData\Local\Programs\Python\Python38\myfunctions.py", line 129, in rsmaara
    for num in row:
TypeError: 'int' object is not iterable
>>> def numcount( a ):
	col = [ ]
	for num in a:
		while len( col ) < num + 1:
			col.append( 0 )
		col[ num ] += 1
	return col

>>> numcount( a )
[0, 8, 7, 4, 9, 3, 5, 4, 3, 2, 3, 2, 1, 5, 0, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
>>> 